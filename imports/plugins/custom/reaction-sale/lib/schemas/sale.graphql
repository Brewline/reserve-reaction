"Represents a Reaction sale"
type Sale implements Node {
  "The sale ID"
  _id: ID!

  "The Shop ID to which this Sale belongs"
  shopId: ID!

  "Headline"
  headline: String

  "URL slug"
  slug: String

  "Description"
  description: String

  "Pickup Instructions"
  instructions: String

  "The date and time at which this sale begins"
  beginsAt: DateTime!

  "The date and time at which this sale ends"
  endsAt: DateTime!

  # mediaId: {
  #   type: String,

  # bannerMediaId: {
  #   type: String,

  "Demo Sale?"
  isDemo: Boolean!

  "Is Visible?"
  isVisible: Boolean

  "The date and time at which this sale was created"
  createdAt: DateTime!

  "The date and time at which this sale was last updated"
  updatedAt: DateTime!

  """
  The date and time at which this sale was deleted
  When set, this object should be considered deleted. Soft deleted objects are
  not returned in query results unless you explicitly ask for them.
  """
  deletedAt: DateTime!
}

"The fields by which you are allowed to sort any query that returns a `SaleConnection`"
enum SaleSortByField {
  _id
  beginsAt
  createdAt
  endsAt
  headline
}

"A connection edge in which each node is a `Sale` object"
type SaleEdge implements NodeEdge {
  cursor: ConnectionCursor!
  node: Sale
}

"Wraps a list of `Sales`, providing pagination cursors and information."
type SaleConnection implements NodeConnection {
  edges: [SaleEdge]
  nodes: [Sale]
  pageInfo: PageInfo!
  totalCount: Int!
}

# # Add sale product?
# "The response from the `inviteSaleMember` mutation"
# type InviteSaleMemberPayload {
#   "The account that was successfully created or found and updated by inviting this sale member"
#   account: Account

#   "The same string you sent with the mutation params, for matching mutation calls with their responses"
#   clientMutationId: String
# }

# extend type Mutation {
#   """
#   Given a person's email address and name, invite them to create an account for a certain sale,
#   and put them in the provided permission group
#   """
#   inviteSaleMember(input: InviteSaleMemberInput!): InviteSaleMemberPayload
# }

extend type Query {
  "Returns all sales for a shop"
  sales(
    "Only sales associated with this shop will be returned"
    shopId: ID!,

    "Set to true if you want soft deleted sales to be included in the response"
    shouldIncludeDeleted: Boolean = false,
  ): SaleConnection

  "Returns a sale by ID"
  sale(id: ID!): Sale

  "Returns a sale by slug"
  saleBySlug(slug: String!): Sale
}
