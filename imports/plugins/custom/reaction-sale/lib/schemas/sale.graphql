"Represents a Reaction sale"
type Sale implements Node {
  "The sale ID"
  _id: ID!

  "The Shop ID to which this Sale belongs"
  shopId: ID

  "The Shop to which this Sale belongs"
  shop: Shop

  "Headline"
  headline: String

  "URL slug"
  slug: String

  "Description"
  description: String

  "Pickup Instructions"
  instructions: String

  "The date and time at which this sale begins"
  beginsAt: DateTime!

  "The date and time at which this sale ends"
  endsAt: DateTime!

  # mediaId: {
  #   type: String,

  # bannerMediaId: {
  #   type: String,

  "Demo Sale?"
  isDemo: Boolean

  "Is Visible?"
  isVisible: Boolean

  "The date and time at which this sale was created"
  createdAt: DateTime!

  "The date and time at which this sale was last updated"
  updatedAt: DateTime

  """
  The date and time at which this sale was deleted
  When set, this object should be considered deleted. Soft deleted objects are
  not returned in query results unless you explicitly ask for them.
  """
  deletedAt: DateTime

  "Indicated one or more products have Low Quantity: UI Suggestion: FOMO labelling"
  isLowQuantity: Boolean

  "Backorder is a subset of Sold Out. UI Suggestion: add to waitlist"
  isBackorder: Boolean

  "Sold Out. UI Suggestion: Sign up to be notified of the next (similar?) sale"
  isSoldOut: Boolean

  "Not yet taking orders. UI Suggestion: Count down timer + Get notified when sale is upcoming"
  hasNotBegun: Boolean

  "No longer taking orders. UI Suggestion: Sign up to be notified"
  hasEnded: Boolean

  products: [CatalogProduct]
}

"The fields by which you are allowed to sort any query that returns a `SaleConnection`"
enum SaleSortByField {
  _id
  beginsAt
  createdAt
  endsAt
  headline
}

"A connection edge in which each node is a `Sale` object"
type SaleEdge implements NodeEdge {
  cursor: ConnectionCursor!
  node: Sale
}

"Wraps a list of `Sales`, providing pagination cursors and information."
type SaleConnection implements NodeConnection {
  edges: [SaleEdge]
  nodes: [Sale]
  pageInfo: PageInfo!
  totalCount: Int!
}

# # Add sale product?
# "The response from the `inviteSaleMember` mutation"
# type InviteSaleMemberPayload {
#   "The account that was successfully created or found and updated by inviting this sale member"
#   account: Account

#   "The same string you sent with the mutation params, for matching mutation calls with their responses"
#   clientMutationId: String
# }

# extend type Mutation {
#   """
#   Given a person's email address and name, invite them to create an account for a certain sale,
#   and put them in the provided permission group
#   """
#   inviteSaleMember(input: InviteSaleMemberInput!): InviteSaleMemberPayload
# }

# TODO: this belongs in a separate plugin
"Represents a Reaction sale"
input SaleInput {
  "The sale ID"
  saleId: ID

  "Headline"
  headline: String

  "URL slug"
  slug: String

  "Description"
  description: String

  "Pickup Instructions"
  instructions: String

  "The date and time at which this sale begins"
  beginsAt: DateTime!

  "The date and time at which this sale ends"
  endsAt: DateTime!

  "Demo Sale?"
  isDemo: Boolean
}

input VariantOptionsInput {
  title: String,
  price: Float,
  inventoryQuantity: Int,
  inventoryLimit: Int
}

extend type Query {
  "Returns all sales for a shop"
  sales(
    "Set to true if you want soft completed sales to be included in the response"
    shouldIncludeCompleted: Boolean = false,

    after: ConnectionCursor,
    before: ConnectionCursor,
    first: ConnectionLimitInt,
    last: ConnectionLimitInt,
    sortOrder: SortOrder = asc,

    """
    By default, sales are sorted by next to start.
    Set this to sort by one of the other allowed fields
    """
    sortBy: SaleSortByField = beginsAt
  ): SaleConnection

  "Returns a sale by slug or ID"
  sale(slugOrId: String): Sale

  "Returns a sale by shop slug/ID _and_ sale slug/ID"
  shopSale(shopSlugOrId: String, saleSlugOrId: String): Sale
}

extend type Shop {
  "Returns shop slug"
  slug: String

  "Returns a paged list of sales for this shop"
  sales(
    "Set to true if you want soft completed sales to be included in the response"
    shouldIncludeCompleted: Boolean = false,

    "Set to true if you want demo-only sales, null for both demo and non-demo sales"
    shouldIncludeDemo: Boolean = false,

    after: ConnectionCursor,
    before: ConnectionCursor,
    first: ConnectionLimitInt,
    last: ConnectionLimitInt,
    sortOrder: SortOrder = asc,

    """
    By default, sales are sorted by next to start.
    Set this to sort by one of the other allowed fields
    """
    sortBy: SaleSortByField = beginsAt
  ): SaleConnection
}

extend type Mutation {
  "Creates a shop given an Untappd Id and optional Sale and Product data"
  createSaleForUntappdProduct(
    "The Id provided by Untappd"
    untappdId: Int!

    "An object containing a sale's id, or some properties of the sale that will be created"
    saleData: SaleInput

    "Array of Variant Option data"
    variantOptionsData: [VariantOptionsInput]!
  ): Sale
}
