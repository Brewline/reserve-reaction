extend type Query {
  "Returns a navigation tree by its ID in the specified language"
  navigationTreeById(id: ID!, language: String!): NavigationTree

  "Returns the navigation items for a shop"
  navigationItemsByShopId(
    "The ID of the shop to load navigation items for"
    shopId: ID!

    after: ConnectionCursor,
    before: ConnectionCursor,
    first: ConnectionLimitInt,
    last: ConnectionLimitInt,
    sortOrder: SortOrder = desc,

    "By default, items are sorted by when they were created, newest first. Set this to sort by one of the other allowed fields"
    sortBy: NavigationItemSortByField = createdAt
  ): NavigationItemConnection
}

"The fields by which you are allowed to sort any query that returns a `NavigationItemConnection`"
enum NavigationItemSortByField {
  _id
  createdAt
}

"Wraps a list of `NavigationItem`s, providing pagination cursors and information"
type NavigationItemConnection implements NodeConnection {
  edges: [NavigationItemEdge]
  nodes: [NavigationItem]
  pageInfo: PageInfo!
  totalCount: Int!
}

"A connection edge in which each node is a `NavigationItem` object"
type NavigationItemEdge implements NodeEdge {
  cursor: ConnectionCursor!
  node: NavigationItem
}

"Represents a single navigation item"
type NavigationItem implements Node {
  "The navigation item ID"
  _id: ID!

  "The ID of the shop the navigation item belongs to"
  shopId: ID!

  "The published data for this navigation item"
  data: NavigationItemData

  "The draft/unpublished data for this navigation item"
  draftData: NavigationItemData

  "An object storing additional metadata about the navigation item (such as its related tag)"
  metadata: JSONObject

  "The date and time at which this navigation item was created"
  createdAt: DateTime!

  "Whether the navigation item has unpublished changes"
  hasUnpublishedChanges: Boolean
}

"Represents the data for a navigation item"
type NavigationItemData {
  "The content for the navigation item, in one or more languages"
  content: [NavigationItemContent]

  "CSS class names to add to the menu item for display"
  classNames: String

  "The URL for the navigation item to link to"
  url: String

  "Whether the provided URL is relative or external"
  isUrlRelative: Boolean

  "Whether the navigation item should trigger a new tab/window to open when clicked"
  shouldOpenInNewWindow: Boolean
}

"Represents the translated content for a navigation item"
type NavigationItemContent {
  "The language of the piece of navigation content"
  language: String!

  "The translated value, in plain text or markdown"
  value: String
}

"Represents a navigation tree containing multiple levels of navigation items"
type NavigationTree implements Node {
  "The navigation tree ID"
  _id: ID!

  "The ID of the shop this navigation tree belongs to"
  shopId: ID!

  "The name of the tree, for operator display purposes. Assumed to be in the primary shop's language"
  name: String!

  "The published navigation items that make up this tree"
  items: [NavigationTreeItem]

  "The draft navigation items that make up this tree"
  draftItems: [NavigationTreeItem]

  "Whether the navigation item has unpublished changes"
  hasUnpublishedChanges: Boolean
}

"Represents a navigation item and its children in a tree"
type NavigationTreeItem {
  "The navigation item"
  navigationItem: NavigationItem!

  "The child navigation items"
  items: [NavigationTreeItem]
}

extend type Mutation {
  "Create a new navigation item"
  createNavigationItem(input: CreateNavigationItemInput!): CreateNavigationItemPayload

  "Update an existing navigation item's draft data. Sets hasUnpublishedChanges to true"
  updateNavigationItem(input: UpdateNavigationItemInput!): UpdateNavigationItemPayload

  "Delete a navigation item"
  deleteNavigationItem(input: DeleteNavigationItemInput!): DeleteNavigationItemPayload

  "Update an existing navigation tree's draft items. Sets hasUnpublishedChanges to true"
  updateNavigationTree(input: UpdateNavigationTreeInput!): UpdateNavigationTreePayload

  "Publish the draft structure for a navigation tree and the draft changes for all of its navigation items. Sets hasUnpublishedChanges to false on tree and its items"
  publishNavigationChanges(input: PublishNavigationChangesInput!): PublishNavigationChangesPayload
}

input CreateNavigationItemInput {
  "The navigation item to create"
  navigationItem: NavigationItemInput!

  "An optional string identifying the mutation call, which will be returned in the response payload"
  clientMutationId: String
}

input UpdateNavigationItemInput {
  "The ID of the navigation item to update"
  _id: ID!

  "The field updates to apply"
  navigationItem: NavigationItemInput!

  "An optional string identifying the mutation call, which will be returned in the response payload"
  clientMutationId: String
}

input DeleteNavigationItemInput {
  "The ID of the navigation item to delete"
  _id: ID!

  "An optional string identifying the mutation call, which will be returned in the response payload"
  clientMutationId: String
}

input UpdateNavigationTreeInput {
  "The ID of the navigation tree to update"
  _id: ID!

  "The field updates to apply"
  navigationTree: NavigationTreeInput!

  "An optional string identifying the mutation call, which will be returned in the response payload"
  clientMutationId: String
}

input PublishNavigationChangesInput {
  "The ID of the navigation tree"
  _id: ID!

  "An optional string identifying the mutation call, which will be returned in the response payload"
  clientMutationId: String
}

input NavigationItemInput {
  "The draft/unpublished data for this navigation item"
  draftData: NavigationItemDataInput

  "An object storing additional metadata about the navigation item (such as its related tag)"
  metadata: JSONObject
}

input NavigationItemDataInput {
  "The content for the navigation item, in one or more languages"
  content: [NavigationItemContentInput]

  "CSS class names to add to the menu item for display"
  classNames: String

  "The URL for the navigation item to link to"
  url: String

  "Whether the provided URL is relative or external"
  isUrlRelative: Boolean

  "Whether the navigation item should trigger a new tab/window to open when clicked"
  shouldOpenInNewWindow: Boolean
}

input NavigationItemContentInput {
  "The language of the piece of navigation content"
  language: String!

  "The translated value, in plain text or markdown"
  value: String
}

input NavigationTreeInput {
  "The name of the tree, for operator display purposes"
  name: String

  "The draft navigation items that make up this tree"
  draftItems: [NavigationTreeItemInput]
}

input NavigationTreeItemInput {
  "The ID of the navigation item"
  navigationItemId: ID!

  "The child navigation items"
  items: [NavigationTreeItemInput]
}

type CreateNavigationItemPayload {
  "The created navigation item"
  navigationItem: NavigationItem

  "The same string you sent with the mutation params, for matching mutation calls with their responses"
  clientMutationId: String
}

type UpdateNavigationItemPayload {
  "The updated navigation item"
  navigationItem: NavigationItem

  "The same string you sent with the mutation params, for matching mutation calls with their responses"
  clientMutationId: String
}

type DeleteNavigationItemPayload {
  "The deleted navigation item"
  navigationItem: NavigationItem

  "The same string you sent with the mutation params, for matching mutation calls with their responses"
  clientMutationId: String
}

type UpdateNavigationTreePayload {
  "The updated navigation tree"
  navigationTree: NavigationTree

  "The same string you sent with the mutation params, for matching mutation calls with their responses"
  clientMutationId: String
}

type PublishNavigationChangesPayload {
  "The navigation tree with updated items"
  navigationTree: NavigationTree

  "The same string you sent with the mutation params, for matching mutation calls with their responses"
  clientMutationId: String
}
