extend type Query {
  "Get an order by its ID"
  orderById(id: ID!, shopId: ID!, token: String): Order

  "Get all orders for a single account, optionally limited to certain shop IDs"
  ordersByAccountId(accountId: ID!, shopIds: [ID]): [Order]!
}

enum OrderFulfillmentGroupItemsSortByField {
  _id
  addedAt
}

"Wraps a list of `OrderItem`s, providing pagination cursors and information."
type OrderItemConnection implements NodeConnection {
  edges: [OrderItemEdge]
  nodes: [OrderItem]
  pageInfo: PageInfo!
  totalCount: Int!
}

"A connection edge in which each node is a `OrderItem` object"
type OrderItemEdge implements NodeEdge {
  cursor: ConnectionCursor!
  node: OrderItem
}

type OrderItemAttribute {
  "The attribute label, e.g., Color"
  label: String

  "The attribute value, e.g., Blue"
  value: String
}

"A summary of the totals for this order"
type OrderSummary {
  "The total of all discounts applied, as a positive number"
  discountTotal: Money!

  "The calculated tax-exclusive tax rate on all items and fulfillment prices"
  effectiveTaxRate: Rate!

  "The total price of all chosen fulfillment methods"
  fulfillmentTotal: Money!

  "The combined prices of all cart items"
  itemTotal: Money!

  "The total estimated tax that has not already been included in the item prices"
  taxTotal: Money!

  "The sum of `itemTotal`, `fulfillmentTotal`, and `taxTotal`, minus `discountTotal`"
  total: Money!
}

"""
A single item in an order. The item contains information about a purchase.
"""
type OrderItem implements Node {
  "The order item ID"
  _id: ID!

  """"
  The date and time at which this item was first added to the associated cart.
  If an item is added, removed, and then added again, this will reflect the most recent addition.
  However, if an item is added twice, the quantity will increase but this date will remain
  the initial added date.
  """
  addedAt: DateTime

  """
  FUTURE. Additional attributes of the chosen item. For example, if this item is for a product, socks, where "blue" and "small"
  options were chosen for some configurable attributes, then "color:blue" and "size:small" will be indicated here.
  """
  attributes: [OrderItemAttribute]

  "The date and time at which the order item was created"
  createdAt: DateTime!

  "The URLs for a picture of the item in various sizes"
  imageURLs: ImageSizes

  "Is this a taxable item?"
  isTaxable: Boolean!

  "Arbitrary additional metadata about this cart item."
  metafields: [Metafield]

  "The short title of the associated option, if this is an option item"
  optionTitle: String

  "Packing information such as item weight, height, length, and depth. Used for calculating shipping rates."
  parcel: ShippingParcel

  "The price of the item at the time of purchase"
  price: Money!

  "The product and chosen options"
  productConfiguration: ProductConfiguration!

  "The product's slug"
  productSlug: String

  "The type of product, used to display cart items differently"
  productType: String

   "The list of tags that have been applied to this product"
  productTags(after: ConnectionCursor, before: ConnectionCursor, first: ConnectionLimitInt, last: ConnectionLimitInt, sortOrder: SortOrder = asc, sortBy: TagSortByField = _id): TagConnection

  "The product vendor"
  productVendor: String

  "The quantity of this item that has been added to the cart. This must be a positive integer. Remove this `CartItem` from it's associated cart if you want `0` of this item."
  quantity: Int!

  "The shop associated with this cart item."
  shop: Shop!

  "The price of the item multiplied by the quantity of this item ordered"
  subtotal: Money!

  "The amount of tax charged for this item"
  tax: Money!

  "Tax code for this item"
  taxCode: String

  "The tax rate used for this item when calculating `tax`"
  taxRate: Rate!

  "A title for use in orders that conveys the selected product's title + chosen options"
  title: String!

  "The date and time at which this item was last updated"
  updatedAt: DateTime!

  "The selected variant title"
  variantTitle: String
}

type ShippingOrderFulfillmentGroupData {
  shippingAddress: Address!
}

union OrderFulfillmentGroupData = ShippingOrderFulfillmentGroupData

type OrderFulfillmentGroup implements Node {
  "The order fulfillment group ID"
  _id: ID!

  "Information needed by the selected fulfillment method to properly fulfill the order"
  data: OrderFulfillmentGroupData

  "The items that are part of this fulfillment group"
  items(after: ConnectionCursor, before: ConnectionCursor, first: ConnectionLimitInt, last: ConnectionLimitInt, sortOrder: SortOrder = desc, sortBy: OrderFulfillmentGroupItemsSortByField = addedAt): OrderItemConnection

  "The payment details for this group"
  payment: Payment!

  "The fulfillment method that was selected, with its price quote"
  selectedFulfillmentOption: FulfillmentOption!

  "The shop responsible for fulfilling this order"
  shop: Shop!

  "A summary of the totals for this group"
  summary: OrderSummary!

  "Total quantity of all items in the group"
  totalItemQuantity: Int!

  """
  The fulfillment type. Any valid type that has been registered by a fulfillment plugin. Examples: "shipping", "digital"
  """
  type: FulfillmentType!
}

"An order"
type Order implements Node {
  "The Order ID"
  _id: ID!

  "The account that placed the order. Some orders are created for anonymous users. Anonymous orders have a null account."
  account: Account

  "The ID of the cart that created this order. Carts are deleted after becoming orders, so this is just a reference."
  cartId: ID

  "One or more fulfillment groups. Each of these are fulfilled and charged as separate orders."
  fulfillmentGroups: [OrderFulfillmentGroup]!

  "The date and time at which the cart was created, which is when the first item was added to it."
  createdAt: DateTime!

  "An email address that has been associated with the cart"
  email: String

  "Notes about the order. This will always return an array but it may be empty"
  notes: [OrderNote]!

  "The shop through which the order was placed"
  shop: Shop!

  "Total quantity of all items in the order"
  totalItemQuantity: Int!

  "The date and time at which this order was last updated"
  updatedAt: DateTime!
}

type OrderNote {
  account: Account!

  content: String!

  createdAt: DateTime!

  updatedAt: DateTime!
}

input OrderFulfillmentGroupItemInput {
  "The date and time at which this item was first added to the source cart, if this is something you want to track"
  addedAt: DateTime

  """
  The price of the item, in the `order.currencyCode` currency. This value is not trusted; the actual price
  is confirmed by the Order service. However, providing this value prevents an order being created for an
  amount that does not match what was shown to the shopper in order preview.
  """
  price: Float!

  "The product and chosen options"
  productConfiguration: ProductConfigurationInput!

  "The desired quantity of this item. This must be a positive integer."
  quantity: Int!
}

"Information needed by the selected fulfillment method to properly fulfill the order"
input OrderFulfillmentGroupDataInput {
  "The mailing address to which this fulfillment group should be shipped"
  shippingAddress: AddressInput
}

input OrderFulfillmentGroupInput {
  "Information needed by the selected fulfillment method to properly fulfill the order"
  data: OrderFulfillmentGroupDataInput

  "The list of items to be ordered"
  items: [OrderFulfillmentGroupItemInput]!

  "The ID of the fulfillment method to be used for this order group"
  selectedFulfillmentMethodId: ID!

  "The shop that owns these items and needs to fulfill this part of the order"
  shopId: ID!

  """
  The total price of the items, fulfillment, and taxes, for this group, less any discounts, in the
  `order.currencyCode` currency. This value is not trusted; the actual total is calculated by the
  Order service. However, providing this value prevents an order being created for an amount that
  does not match what was shown to the shopper in order preview.
  """
  totalPrice: Float!

  """
  The fulfillment type. Any valid type that has been registered by a fulfillment plugin. Examples: "shipping", "digital"
  """
  type: FulfillmentType!
}

input OrderInput {
  """
  The ID of the cart that is becoming an order. This is optional, and you can create an order without ever
  creating a cart. If you do have a cart, there are two good reasons to provide this. First, it serves as a
  reference. Second, it allows the Cart service to automatically delete the related cart after the order is
  created.
  """
  cartId: String

  "The code for the currency in which all values are being provided"
  currencyCode: String!

  """
  An email address to use for order tracking and correspondence. If a logged in user is placing an order,
  we recommend that you use their "orders" email address, if they have one, or their default email address.
  Or you can ask them to provide any email address.
  """
  email: String!

  """
  One or more fulfillment groups for the order. These are the actual orders that need to be fulfilled,
  separate by shop, fulfillment type, and shipping origin or destination.
  """
  fulfillmentGroups: [OrderFulfillmentGroupInput]!

  """
  The shop through which the order should be placed. Payment settings from this shop will be used. Note that
  each fulfillment group also has a shop ID, which represents the shop that needs to fulfill that part of the
  order, and those shop IDs may or may not match this one.
  """
  shopId: String!
}

type PlaceOrderPayload {
  "Orders that were created"
  orders: [Order]!

  "If you are not logged in, this will be a token that can be used for future requests"
  token: String
}
