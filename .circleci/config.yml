version: 2

# The following stanza defines a map named defaults with a variable that may be
# inserted using the YAML merge (<<: *) key later in the file to save some
# typing. See http://yaml.org/type/merge.html for details.
defaults: &defaults
  environment:
    - DOCKER_REPOSITORY: "reactioncommerce/reaction"
    - DOCKER_NAMESPACE: "reactioncommerce"
    - DOCKER_NAME: "reaction"
    - GLOBAL_CACHE_VERSION: "v2"
    - TOOL_NODE_FLAGS: "--max-old-space-size=4096"
  working_directory: ~/reaction-app
  docker:
    - image: circleci/node:8-stretch

jobs:
  build:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - restore_cache:
          name: Restoring Meteor cache
          key: ${GLOBAL_CACHE_VERSION}-meteor
      - run:
          name: Install Meteor
          command: |
            if [[ -f ~/.meteor/meteor ]]; then \
              printf "\nMeteor already installed. Creating symlink.\n"
              sudo ln -s ~/.meteor/meteor /usr/local/bin/meteor;
            else
              printf "\Installing Meteor\n"
              curl https://install.meteor.com | /bin/sh
            fi
      - save_cache:
          name: Saving Meteor to cache
          key: ${GLOBAL_CACHE_VERSION}-meteor-{{ epoch }}
          paths:
            - ~/.meteor
      - run:
          name: Meteor NPM Install
          command: meteor npm install
      - run:
          name: Build dist bundle
          command: meteor build --directory ../build/
      - run:
          name: Check .js file size
          command: |
            maxSize=2967000
            size=$( wc -c ../build/bundle/programs/web.browser/*.js | awk '{$1=$1};1' | cut -d " " -f 1 )
            if [[ $size -gt $maxSize ]]; then
              echo "The production js file has size" $size "which exceeds limit of" $maxSize 1>&2
              exit 3
            else
              echo "The js file size is" $size
            fi
      - run:
          name: Check .css file size
          command: |
            maxSize=24888
            size=$( wc -c ../build/bundle/programs/web.browser/*.css | awk '{$1=$1};1' | cut -d " " -f 1 )
            if [[ $size -gt $maxSize ]]; then
              echo "The production js file has size" $size "which exceeds limit of" $maxSize 1>&2
              exit 3
            else
              echo "The css file size is" $size
            fi
      # Store node_modules dependency cache.
      # Saved with package.json checksum and timestamped branch name keys.
      - save_cache:
          key: ${GLOBAL_CACHE_VERSION}-node-modules-{{ checksum "package.json" }}-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
      - save_cache:
          key: ${GLOBAL_CACHE_VERSION}-node-modules-{{ .Branch }}-{{ epoch }}
          paths:
            - node_modules
      # mongodb-memory-server installs Mongo binary on npm install, which we need
      # later when we run Jest integration tests
      - save_cache:
          name: Saving mongodb-memory-server MongoDB cache
          key: mongodb-memory-server
          paths:
            - ~/.mongodb-binaries


  docker-build:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - attach_workspace:
          at: docker-cache
      - run:
          name: Discover Docker Tags
          command: |
            mkdir -p docker-cache
            .circleci/bin/docker-tags "$CIRCLE_SHA1" "$CIRCLE_BRANCH" | sed 's/\//-/g' \
              > docker-cache/docker-tags.txt
      - run:
          name: Docker build
          command: |
            docker build \
              --build-arg TOOL_NODE_FLAGS="--max-old-space-size=4096" \
              -t "$DOCKER_REPOSITORY:$CIRCLE_SHA1" .
            mkdir -p docker-cache
            docker save \
              -o docker-cache/docker-image.tar \
              "$DOCKER_REPOSITORY:$CIRCLE_SHA1"
          no_output_timeout: 30m
      - persist_to_workspace:
          root: docker-cache
          paths:
            - docker-image.tar
            - docker-tags.txt

  docker-push:
    <<: *defaults
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - attach_workspace:
          at: docker-cache
      - run:
          name: Load Docker Image
          command: |
            docker load < docker-cache/docker-image.tar
      - run:
          name: Tag Docker Image
          command: |
            cat docker-cache/docker-tags.txt \
              | xargs -t -I % \
                docker tag \
                  "$DOCKER_REPOSITORY:$CIRCLE_SHA1" \
                  "$DOCKER_REPOSITORY:%"
      - run:
          name: Docker Push
          command: |
            if [ -z "$CIRCLE_PR_USERNAME" ]; then \
              docker login -u "$DOCKER_USER" -p "$DOCKER_PASS"
              docker push "$DOCKER_REPOSITORY:$CIRCLE_SHA1"
              cat docker-cache/docker-tags.txt \
                | xargs -t -I % \
                  docker push "$DOCKER_REPOSITORY:%"
            else
              echo "No deploy for forks"
            fi

  deploy-to-ecs-release-branch:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Deploy new task definition and update service in ECS
          command: |
            .circleci/bin/ecs-deploy-release-branch.sh
          no_output_timeout: 30m

  deploy-to-ecs-feature-branch:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Deploy new task definition and update service in ECS
          command: |
            .circleci/bin/ecs-deploy-feature-branch.sh
          no_output_timeout: 30m

  deploy-docs:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Install AWS CLI
          command: sudo apt-get -y -qq install awscli
      - run:
          name: NPM Install JSDoc
          command: sudo npm install -g jsdoc
      - run:
          name: Build JSDoc files
          command: |
            jsdoc . \
              --verbose \
              --configure .reaction/jsdoc/jsdoc.json \
              --readme .reaction/jsdoc/templates/static/README.md
      - run:
          name: Deploy Doc files to S3
          command: |
            if [[ "${API_DOC_BUCKET}" && "${API_DOC_BUCKET_REGION}" ]]; then
              aws s3 sync /tmp/reaction-docs ${API_DOC_BUCKET} --delete --region ${API_DOC_BUCKET_REGION}
            else
              echo "S3 bucket configuration not found for jsdocs"
              echo "Set API_DOC_BUCKET and API_DOC_BUCKET_REGION to build and deploy jsdocs to S3"
              exit 1;
            fi

  eslint:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys:
            - ${GLOBAL_CACHE_VERSION}-node-modules-{{ checksum "package.json" }}-{{ checksum "package-lock.json" }}
            - ${GLOBAL_CACHE_VERSION}-node-modules-{{ .Branch }}
            - ${GLOBAL_CACHE_VERSION}-node-modules-master
      - run:
          name: Run Lint
          command: |
            npm run lint -- --quiet

  test-app:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          name: Restoring Meteor cache
          key: ${GLOBAL_CACHE_VERSION}-meteor
      - run:
          name: Link Restored Meteor
          command: sudo ln -s ~/.meteor/meteor /usr/local/bin/meteor
      - restore_cache:
          # Fall back to less specific caches
          keys:
            - ${GLOBAL_CACHE_VERSION}-node-modules-{{ checksum "package.json" }}-{{ checksum "package-lock.json" }}
            - ${GLOBAL_CACHE_VERSION}-node-modules-{{ .Branch }}
            - ${GLOBAL_CACHE_VERSION}-node-modules-master
      - run:
          name: Install Reaction CLI
          command: sudo npm install -g reaction-cli
      - run:
          name: Load App Plugins
          command: reaction plugins load
      - run:
          name: Run Meteor Integration Tests
          command: .circleci/tests.sh

  test-unit:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys:
            - ${GLOBAL_CACHE_VERSION}-node-modules-{{ checksum "package.json" }}-{{ checksum "package-lock.json" }}
            - ${GLOBAL_CACHE_VERSION}-node-modules-{{ .Branch }}
            - ${GLOBAL_CACHE_VERSION}-node-modules-master
      - run:
          name: Run Unit Tests
          command: npm run test:unit

  test-integration:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-node-modules-{{ checksum "package.json" }}-{{ checksum "package-lock.json" }}
            - v1-node-modules-{{ .Branch }}
            - v1-node-modules-master
      - restore_cache:
          name: Restoring mongodb-memory-server MongoDB cache
          key: mongodb-memory-server
      - run:
          name: Run Integration Tests
          command: npm run test:integration

  dockerfile-lint:
    <<: *defaults
    docker:
      - image: hadolint/hadolint:v1.6.6-6-g254b4ff
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Dockerfile Lint
          command: |
            hadolint Dockerfile

  snyk-security:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - restore_cache:
          keys:
            - ${GLOBAL_CACHE_VERSION}-node-modules-{{ checksum "package.json" }}-{{ checksum "package-lock.json" }}
            - ${GLOBAL_CACHE_VERSION}-node-modules-{{ .Branch }}
            - ${GLOBAL_CACHE_VERSION}-node-modules-master
      - run:
          name: Snyk Test
          command: |
            CIRCLE_PR_NUMBER="${CIRCLE_PR_NUMBER:-${CIRCLE_PULL_REQUEST##*/}}" # Determine PR number from pull request link
            if [[ -v CIRCLE_PR_NUMBER ]] && [ -n ${CIRCLE_PR_NUMBER} ]; then
              url="https://api.github.com/repos/${DOCKER_REPOSITORY}/pulls/$CIRCLE_PR_NUMBER" # Get PR from github API
              TARGET_BRANCH=$(curl "$url" | jq '.base.ref' | tr -d '"') # Determine target/base branch from API response
            fi

            if [ -z "${TARGET_BRANCH}" ] || [  ${TARGET_BRANCH} == "null" ]; then
              echo "Not a PR. Skipping Snyk."
              exit 0
            fi

            # If target branch does not exist or is master, run snyk tests
            if [ ${TARGET_BRANCH} == "master" ] || [ -z "${TARGET_BRANCH/[ ]*\n/}" ]; then
              PATH=$PATH:$CIRCLE_WORKING_DIRECTORY/node_modules/.bin && \
                snyk test
            else
              # If package.json is different from the base branch, run snyk
              if git diff origin/$CIRCLE_BRANCH..origin/$TARGET_BRANCH package.json | grep diff; then
                echo "package.json different. Running Snyk."
                PATH=$PATH:$CIRCLE_WORKING_DIRECTORY/node_modules/.bin && \
                snyk test
              else
                echo "package.json identical to target branch. Skipping Snyk."
              fi
            fi

workflows:
  version: 2
  build_and_test:
    jobs:
      - build
      - dockerfile-lint
      - test-app:
          requires:
            - build
      - test-unit:
          requires:
            - build
      # TODO uncomment and figure out why they always fail on CI
      # - test-integration:
      #     requires:
      #       - build
      - eslint:
          requires:
            - build
      - docker-build:
          context: reaction-build-read
          requires:
            - snyk-security
      - docker-push:
          context: reaction-publish-docker
          requires:
            - docker-build
      - deploy-to-ecs-release-branch:
          requires:
            - docker-push
          filters:
            branches:
              only: /^release-2.*/
      - deploy-to-ecs-feature-branch:
          requires:
            - docker-push
          filters:
            branches:
              only: /^feat.*/
      - deploy-docs:
          requires:
            - test-unit
            - test-app
            - docker-build
          filters:
            branches:
              only: /^master$/
      - snyk-security:
          context: reaction-validation
          requires:
            - build
